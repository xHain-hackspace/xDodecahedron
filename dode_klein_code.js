//let cornerTable: number[][][] = []
let stripeTable: number[][] = []
let miniBuf: number[][] = []
let Index = 0
let pixel: neopixel.Strip = null

let l = 1
let k = 0
let x = 0
let m = 0
let hue = 0
Index = 0
pixel = neopixel.create(DigitalPin.P0, 120, NeoPixelMode.RGB)

//cornerTable = [[[3, 2, 1, 0], [4, 5, 6, 7], [8, 9, 10, 11]],
//[[11, 10, 9, 8], [12, 13, 14, 15], [16, 17, 18, 19]],
//[[19, 18, 17, 16], [20, 21, 22, 23], [24, 25, 26, 27]],
//[[27, 26, 25, 24], [28, 29, 30, 31], [32, 33, 34, 35]],
//[[35, 34, 33, 32], [36, 37, 38, 39], [0, 1, 2, 3]],
//[[39, 38, 37, 36], [43, 42, 41, 40], [44, 45, 46, 47]],
//[[47, 46, 45, 44], [48, 49, 50, 51], [87, 86, 85, 84]],
//[[51, 50, 49, 48], [52, 53, 54, 55], [7, 6, 5, 4]],
//[[55, 54, 53, 52], [56, 57, 58, 59], [95, 94, 93, 92]],
//[[59, 58, 57, 56], [60, 61, 62, 63], [15, 14, 13, 12]],
//[[63, 62, 61, 60], [64, 65, 66, 67], [103, 102, 101, 100]],
//[[67, 66, 65, 64], [68, 69, 70, 71], [23, 22, 21, 20]],
//[[71, 70, 69, 68], [72, 73, 74, 75], [111, 110, 109, 108]],
//[[75, 74, 73, 72], [76, 77, 78, 79], [31, 30, 29, 28]],
//[[79, 78, 77, 76], [40, 41, 42, 43], [119, 118, 117, 116]],
//[[119, 118, 117, 116], [115, 114, 113, 112], [80, 81, 82, 83]],
//[[112, 113, 114, 115], [108, 109, 110, 111], [107, 106, 105, 104]],
//[[104, 105, 106, 107], [100, 101, 102, 103], [99, 98, 97, 96]],
//[[96, 97, 98, 99], [92, 93, 94, 95], [91, 90, 89, 88]],
//[[88, 89, 90, 91], [84, 85, 86, 87], [83, 82, 81, 80]]
//]

stripeTable = [
    [10, -9, 0, 1, 2, 3, 2, 3],
    [-1, 3, 4, 5, 6, 7, -13, 14],
    [2, -1, 8, 9, 10, 11, 4, 5],
    [-3, 5, 12, 13, 14, 15, -15, 16],
    [4, -3, 16, 17, 18, 19, 6, 7],
    [-5, 7, 20, 21, 22, 23, -17, 18],
    [6, -5, 24, 25, 26, 27, 8, 9],
    [-7, 9, 28, 29, 30, 31, -19, 20],
    [8, -7, 32, 33, 34, 35, 10, 1],
    [-9, 1, 36, 37, 38, 39, -11, 12],
    [-30, -20, 40, 41, 42, 43, 12, -10],
    [-11, -10, 44, 45, 46, 47, -22, 13],
    [-22, -12, 48, 49, 50, 51, 14, -2],
    [-13, -2, 52, 53, 54, 55, -24, 15],
    [-24, -14, 56, 57, 58, 59, 16, -4],
    [-15, -4, 60, 61, 62, 63, -26, 17],
    [-26, -16, 64, 65, 66, 67, 18, -6],
    [-17, -6, 68, 69, 70, 71, -28, 19],
    [-28, -18, 72, 73, 74, 75, 20, -8],
    [-19, -8, 76, 77, 78, 79, -30, 11],
    [-29, 30, 80, 81, 82, 83, 23, 22],
    [23, -21, 84, 85, 86, 87, 13, -12],
    [22, -21, 88, 89, 90, 91, 25, 24],
    [-23, 25, 92, 93, 94, 95, 15, -14],
    [24, -23, 96, 97, 98, 99, 27, 26],
    [-25, 27, 100, 101, 102, 103, 17, -16],
    [26, -25, 104, 105, 106, 107, 29, 28],
    [-27, 29, 108, 109, 110, 111, 19, -18],
    [28, -27, 112, 113, 114, 115, 21, 30],
    [-29, 21, 116, 117, 118, 119, 11, -20]
]

miniBuf = [
    [0, 0],
    [0, 0],
    [0, 0],
    [0, 0],
    [0, 0],
    [0, 0],
    [0, 0],
    [0, 0],
    [0, 0],
    [0, 0],
    [0, 0],
    [0, 0]
]

function walk() {
    hue = (hue + Math.random(8)) % 360
    k = (Math.random(255) % 2)
    //stripe loop
    if (l >= 1) {
        m = l - 1
        for (let i = 2; i < 6; i++) {
            // buffer the values
            for (let x = 11; x > 0; x--) {
                miniBuf[x][0] = miniBuf[x - 1][0]
                miniBuf[x][1] = miniBuf[x - 1][1]
            }
            miniBuf[0][0] = stripeTable[m][i]
            miniBuf[0][1] = hue

            for (let x = 0; x < 12; x++) {
                pixel.setPixelColor(miniBuf[x][0], neopixel.hsl(miniBuf[x][1], 99, 55 - (x * 5)))
            }
            pixel.show()
            let pau = Math.random(50)
            basic.pause(1 + pau)
        }
        // point to the next random location
        (l = stripeTable[m][k + 6])
    }
    else {
        m = Math.abs(l) - 1
        for (let i = 5; i > 1; i--) {
            // buffer the values
            for (let x = 11; x > 0; x--) {
                miniBuf[x][0] = miniBuf[x - 1][0]
                miniBuf[x][1] = miniBuf[x - 1][1]
            }
            //set the new value
            miniBuf[0][0] = stripeTable[m][i]
            miniBuf[0][1] = hue
            //update the pixels
            for (let x = 0; x < 12; x++) {
                pixel.setPixelColor(miniBuf[x][0], neopixel.hsl(miniBuf[x][1], 99, 55 - (x * 5)))
            }
            pixel.show()
            let pau = Math.random(50)
            basic.pause(1 + pau)
        }
        // point to the next random location
        l = (stripeTable[m][1 - k])
    }
}


basic.forever(() => {
    walk()

    // let r = Math.random(255)
    // let g = Math.random(255)
    //  let b = Math.random(255)



    // corner loop
    /*    for (let k = 0; k <= 20 - 1; k++) {
            l = Math.random(20)
            for (let i = 0; i <= 4 - 1; i++) {
                for (let j = 0; j <= 3 - 1; j++) {
                    pixel.setPixelColor(cornerTable[l][j][i], neopixel.rgb(r, g, b))
                    if (i > 0) {
                        pixel.setPixelColor(cornerTable[l][j][i - 1], neopixel.rgb(0, 0, 0))
                    }
                }
                pixel.show()
                basic.pause(50)
            }
        }*/
    //    pixel.clear()
})



